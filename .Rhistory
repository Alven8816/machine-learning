a <-NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:nrow(datas)){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")}
head(a)
for(i in 1:nrow(datas)){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(getURL(a[i]),useInternal = TRUE)}
doc[i] <- htmlTreeParse(getURL(a[i]),useInternal = TRUE)
address <- NULL
address <- getURL(a[5])
address[5] <- getURL(a[5])
address
doc[5] <- htmlTreeParse(address[5],useInternal = TRUE)
doc <- htmlTreeParse(address[5],useInternal = TRUE)
doc
lat[i] <- as.numeric(xpathSApply(doc,"//lat",xmlValue))
lng[i] <- as.numeric(xpathSApply(doc,"//lng",xmlValue))
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:nrow(datas)){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i])
doc[i] <- htmlTreeParse(address[i],useInternal = TRUE)
#搜索地理坐标
lat[i] <- as.numeric(xpathSApply(doc[i],"//lat",xmlValue))
lng[i] <- as.numeric(xpathSApply(doc[i],"//lng",xmlValue))
}
for(i in 1:nrow(datas)){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")}
head(a)
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)
a[3]
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")}
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)}
for(i in 1:2){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)}
for(i in 1:1){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)}
rm(a)
for(i in 1:1){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)}
a <-NULL
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:1){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a[i],useInternal = TRUE)}
a <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
doc[i] <- htmlTreeParse(a,useInternal = TRUE)
a <- "http://api.map.baidu.com/geocoder/v2/?address=上海市汇成路园西路东约1米&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation"
address <- getURL(a)
doc <- htmlTreeParse(address,useInternal = TRUE)
library(XML)
x <- as.numeric(xpathSApply(doc,"//lat",xmlValue))
y <- as.numeric(xpathSApply(doc,"//lng",xmlValue))
a <- "http://api.map.baidu.com/geocoder/v2/?address=上海市汇成路园西路东约1米&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation"
address <- getURL(a)
doc <- htmlTreeParse(address,useInternal = TRUE)
library(XML)
#搜索地理坐标
lat <- as.numeric(xpathSApply(doc,"//lat",xmlValue))
lng <- as.numeric(xpathSApply(doc,"//lng",xmlValue))
rm(x,y)
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i])}
address
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i])
doc[i] <- htmlTreeParse(address[i],useInternal = TRUE)}
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")
doc[i] <- htmlTreeParse(address[i],useInternal = TRUE)}
a
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")}
address
xpathApply(address,"//lat",xmlValue)
xpathApply(address[1],"//lat",xmlValue)
address[1]
xpathApply(address[1],"//lat",xmlValue)
doc <- htmlTreeParse(address,useInternal = TRUE)
doc
xpathApply(doc,"//lat",xmlValue)
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")
doc <- htmlTreeParse(address,useInternal = TRUE)
#搜索地理坐标
lat[i] <- as.numeric(xpathSApply(doc,"//lat",xmlValue))
lng[i] <- as.numeric(xpathSApply(doc,"//lng",xmlValue))
}
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")
doc <- htmlTreeParse(address,useInternal = TRUE)
#搜索地理坐标
lat[i] <- xpathSApply(doc,"//lat",xmlValue)
lng[i] <- xpathSApply(doc,"//lng",xmlValue)
}
lat
for(i in 1:5){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")
doc <- htmlTreeParse(address,useInternal = TRUE)
#搜索地理坐标
lat <- xpathSApply(doc,"//lat",xmlValue)
lng <- xpathSApply(doc,"//lng",xmlValue)
}
lat
lng
a <-NULL
address <- NULL
doc <- NULL
lat <- NULL
lng <- NULL
for(i in 1:nrow(datas)){
a[i] <- paste0("http://api.map.baidu.com/geocoder/v2/?address=","上海市",datas$address[i],"&output=XML&ak=6MRdtm6SQ7BzAqEtlvVFAWIB&callback=showLocation")
address[i] <- getURL(a[i],.encoding="utf-8")
doc <- htmlTreeParse(address,useInternal = TRUE)
#搜索地理坐标
lat <- xpathSApply(doc,"//lat",xmlValue)
lng <- xpathSApply(doc,"//lng",xmlValue)
}
datas$lat <-lat
datas$lng <-lng
datas$lat[1:1011] <-lat
class(lat)
mode(lat)
lat <- c(lat,NA,NA)
LNG <- C(LNG,NA,NA)
lng <- C(lng,NA,NA)
lng <- C(lng,NA,NA)
lng <-C(lng,NA,NA)
lng <-c(lng,NA,NA)
datas$lat <-lat
datas$lng <-lng
head(datas)
write.csv(datas,"data.csv")
SHMap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 14) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$address)
SHMap
SHmap <- leaflet() %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 13) %>%
addMarkers(121.1190, 31.1153, popup = 'accident Area')  %>%
addCircleMarkers(121.1190, 31.1154, popup = 'accident Area ', radius = 5, color = 'red')
SHmap
SHmap <- leaflet() %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 11) %>%
addMarkers(121.1190, 31.1153, popup = 'accident Area')  %>%
addCircleMarkers(121.1190, 31.1154, popup = 'accident Area ', radius = 5, color = 'red')
SHmap
SHmap <- leaflet() %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(121.1190, 31.1153, popup = 'accident Area')  %>%
addCircleMarkers(121.1190, 31.1154, popup = 'accident Area ', radius = 5, color = 'red')
SHmap
SHMap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$address)
SHMap
SHmap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$address)
SHmap
SHmap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$DMSM1)
SHmap
SHmap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$DMSM1)
SHmap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$DMSM1)
SHmap %>%
addTiles() %>%
setView(121.1190, 31.1153, zoom = 9) %>%
addCircleMarkers(data = datas, lng = ~ lng, lat = ~ lat, radius = 5,
color = ~ ifelse(datas$DMSM1 == '死亡事件', 'red', 'blue'),
clusterOptions = markerClusterOptions())
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
SHmap <- leaflet() %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 9) %>%
addMarkers(121.5064701061, 31.245341811635, popup = '东方明珠')  %>%
addCircleMarkers(121.5064701061, 31.245341811635, popup = 'accident Area ', radius = 5, color = 'red')
SHmap
SHmap <- leaflet() %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 14) %>%
addMarkers(121.5064701061, 31.245341811635, popup = '东方明珠')  %>%
addCircleMarkers(121.5064701061, 31.245341811635, popup = 'accident Area ', radius = 5, color = 'red')
SHmap
SHmap %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 9) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$DMSM1)
SHmap %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 11) %>%
addMarkers(data = datas, lng = ~ lng, lat = ~ lat, popup = datas$DMSM1)
SHmap %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 9) %>%
addCircleMarkers(data = datas, lng = ~ lng, lat = ~ lat, radius = 5,
color = ~ ifelse(datas$DMSM1 == '死亡事件', 'red', 'blue'),
clusterOptions = markerClusterOptions())
SHmap %>%
addTiles() %>%
setView(121.5064701061, 31.245341811635, zoom = 11) %>%
addCircleMarkers(data = datas, lng = ~ lng, lat = ~ lat, radius = 5,
color = ~ ifelse(datas$DMSM1 == '死亡事件', 'red', 'blue'),
clusterOptions = markerClusterOptions())
getwd()
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas$address <- gsub(",(.*)",'',datas$SGDD)
datas$time <- gsub("(.*),",'',datas$SGDD)
datas <- datas[,c(1,3,6,7)]
datas$DMSM1 <- factor(datas$DMSM1)
abc
abc <-NULL
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas$address <- gsub(",(.*)",'',datas$SGDD)
datas$time <- gsub("(.*),",'',datas$SGDD)
datas <- datas[,c(1,3,6,7)]
datas$DMSM1 <- factor(datas$DMSM1)
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas$address <- gsub(",(.*)",'',datas$SGDD)
datas$time <- gsub("(.*),",'',datas$SGDD)
datas <- datas[,c(1,3,6,7)]
datas$DMSM1 <- factor(datas$DMSM1)
head(datas)
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas$address <- gsub(",(.*)",'',datas$SGDD)
datas$time <- gsub("(.*),",'',datas$SGDD)
datas <- datas[,c(1,3,6,7)]
datas$DMSM1 <- factor(datas$DMSM1)
datas <- read.csv(file = "accident.txt",header = TRUE,stringsAsFactors = FALSE,encoding = "UTF-8")
datas$address <- gsub(",(.*)",'',datas$SGDD)
datas$time <- gsub("(.*),",'',datas$SGDD)
datas <- datas[,c(1,3,6,7)]
datas$DMSM1 <- factor(datas$DMSM1)
write.csv(datas,"datas.csv")
datas <- read.csv("datas.csv")
head(datas)
datas$lat <-lat
datas$lng <-lng
head(datas)
View(datas)
da <- "网站停留时间：3小时4分50秒"
time <- strsplit(da,split = ":")
time
time <- strsplit(da,split = ": ")
time
da <- "网站停留时间：3小时4分50秒"
time <- strsplit(da,split = ":")
da
time
time[[1]][2]
times <- "3小时4分50秒"
time <- strsplit(times,split = "小时")
time
time <- unlist(time)
time
h <- as.numeric(time[1])
h
min.sec <- data[2]
min.sec <- time[2]
min.sec <- unlist(strsplit(min.sec,split = "分"))
min.sec
min.sec <- as.numeric(min.sec[1])
mim.sec
min.sec
sec <- min.sec[2]
sec
times <- "3小时4分50秒"
time <- strsplit(times,split = "小时")
time <- unlist(time)
h <- as.numeric(time[1])
min.sec <- time[2]
min.sec
min.sec <- unlist(strsplit(min.sec,split = "分"))
min.sec
min <- as.numeric(min.sec[1])
min
sec <- min.sec[2]
sec
sec <- unlist(strsplit(sec,split = "秒"))
sec
sec <- as.numeric(min.sec[1])
times_sec <- 3600*h +60*min + sec
times_sec
da <- "网站停留时间：3小时4分50秒"
time <- strsplit(da,split = "//:")
time
da <- "网站停留时间：3小时4分50秒"
time <- strsplit(da,split = ":")
time
da <- "网站停留时间 3小时4分50秒"
time <- strsplit(da,split = " ")
time
time[2]
time[[1]][2]
da <- "网站停留时间,3小时4分50秒"
time <- strsplit(da,split = ",")
time
unlist(time)
install.packages("RMySQL")
library(RMySQL)
library(RMySQL)
con <- dbConnect(MySQL(),user = "localhost",password = "420281HUA$")
con <- dbConnect(MySQL(),user = "user1",password = "12345")
library(ggplot2)
data(diamonds)
dbWriteTable(con,"diamonds",diamonds_data)
con <- dbConnect(MySQL(),user = "user1",password = "12345",dbname='intro_to_sql')
con <- dbConnect(MySQL(),user = "user1",password = "12345",dbname='intro_to_sql')
con <- dbConnect(MySQL(),user = "user1",password = "12345")
con
dbWriteTable(con,"diamonds",intro_to_sql)
dbListTables(con)
dbListTables(con,dbname = "intro_to_sql")
con <- dbConnect(MySQL(),user = "user1",password = "12345",dbname = "intro_to_sql")
gc()
rm(list(ls()))
rm(list(ls())=TRUE)
ls()
list(ls())
rm(list(ls()))
rm(ls())
rm(ls()=list())
list=ls()
list
a = ls()
rm(a)
rm(a = ls())
rm(list = min)
rm(list = ls())
gc()
gcinfo(TRUE)
gcinfo()
x <- integer(1000); for(i in 1:18) x <- c(x, i)
gc()
gc(TRUE)
gc(resec = TRUE)
gc(reseT = TRUE)
gc(reset  = TRUE)
install.packages("parallel")
install.packages("parallel")
install.packages("binary")
install.packages("parallel")
library(parallel)
gc()
doit <- function (x) x^2 +2*x
system.time(res <- lapply(1:50000, doit))
gc()
doit <- function (x) x^2 +2*x
system.time(res <- lapply(1:5000000, doit))
detectCores()
gc()
gc()
gc()
gc()
library(parallel)
detectCores(logical = FALSE) #获得实际物理内核数
gc()
gc()
doit <- function (x) x^2 +2*x
library(parallel)
cl <- makeCluster(getOption("c1.cores",3)) #使用3个内核
system.time(res <- parLapply(cl = cl, 1:5000000, doit))
gc()
stopCluster(cl)
gc()
gc()
library(foreach)
library(foreach)
doit <- function (x) x^2 +2*x
x <- foreach(x = 1:1000000,.combine = "rbind") %do% doit(x)
gc()
doit <- function (x) x^2 +2*x
rm()
system.time(x <- foreach(x = 1:1000000,.combine = "rbind") %do% doit(x))
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
system.time(x <- foreach(x = 1:1000000,.combine = "rbind") %dopar% doit(x))
x
gc()
stopCluster(cl)
gc()
pml <- read.csv("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project\\pml-training.csv",header = TRUE,stringsAsFactors = FALSE,na.strings =c( NA,"#DIV/0!"))
test <- read.csv("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project\\pml-testing.csv",header = TRUE,stringsAsFactors = FALSE,na.strings = c(NA,"#DIV/0!"))
```
pml$classe <- as.factor(pml$classe)
library(mice)
md.pattern(pml)
#there ara 19216 cases which less have one NA value.
na <- sapply(pml,FUN = function(x){sum(is.na(x))})
col <- as.numeric(which(na >= 19216))
new_pml<- pml[,-col]
#removing the irrelated columns
pml <- new_pml[,-(1:8)]
write(pml,file = 'pml.csv')
getwd()
setwd("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project")
write(pml,file = 'pml.csv')
write(pml,file = "pml.csv")
write.table(pml,file = "pml.csv")
pml <- read.csv("pml.csv")
View(pml)
pml <- read.csv("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project\\pml-training.csv",header = TRUE,stringsAsFactors = FALSE,na.strings =c( NA,"#DIV/0!"))
test <- read.csv("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project\\pml-testing.csv",header = TRUE,stringsAsFactors = FALSE,na.strings = c(NA,"#DIV/0!"))
pml$classe <- as.factor(pml$classe)
na <- sapply(pml,FUN = function(x){sum(is.na(x))})
col <- as.numeric(which(na >= 19216))
new_pml<- pml[,-col]
#removing the irrelated columns
pml <- new_pml[,-(1:8)]
write.csv(pml,file = "pml.csv")
pml1 <- read.csv("pml.csv")
View(pml1)
View(pml)
pml1 <- read.csv("pml.csv",row.names = TRUE)
gc()
pml1 <- read.csv("pml.csv")
pml <- pml[,-1]
pml <- pml1[,-1]
train <- createDataPartition(y=pml$classe,p = 0.7,list = FALSE)
training <- pml[train,]
testing <- pml[-train,]
library(caret)
set.seed(1234)
train <- createDataPartition(y=pml$classe,p = 0.7,list = FALSE)
training <- pml[train,]
testing <- pml[-train,]
library(parallel)
library(doParallel)
library(foreach)
cl <- makeCluster(4)
registerDoParallel(cl)
fit_train <- foreach( x = 4,.combine = combine,.packages = 'caret') %dopar% train(classe ~ . , training, method = "rf",trControl = trainControl(method = "cv", number = x))
stopCluster(cl)
library(parallel)
library(doParallel)
library(foreach)
cl <- makeCluster(4)
registerDoParallel(cl)
fit_train <- foreach( x = 4,.combine = "combine",.packages = 'caret') %dopar% train(classe ~ . , training, method = "rf",trControl = trainControl(method = "cv", number = x))
stopCluster(cl)
library(parallel)
library(doParallel)
library(foreach)
cl <- makeCluster(4)
registerDoParallel(cl)
fit_train <- foreach( x = 4,.combine = "rbind",.packages = 'caret') %dopar% train(classe ~ . , training, method = "rf",trControl = trainControl(method = "cv", number = x))
stopCluster(cl)
fit_train
prediction<- predict(fit_train,newdata = testing)
pml$classe <- as.factor(pml$classe,labels= c("A","B","C","D","E"))
pml$classe <- factor(pml$classe,labels= c("A","B","C","D","E"))
View(pml)
confusionMatrix(prediction,testing$classe)
predict(fit_train,test)
test <- read.csv("C:\\Users\\HP\\Documents\\coursera\\coursera project 8 Machine Learning\\couresra project\\pml-testing.csv",header = TRUE,stringsAsFactors = FALSE,na.strings = c(NA,"#DIV/0!"))
predict(fit_train,test)
gc()
